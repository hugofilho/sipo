library(DiagrammeR)
mermaid("
graph TB
id1(Identify or Deduce Mutation por Identifying or Deducing Mutation)==>id2[File Handling]
id2==>id3(Mapping Variables)
id3==>|Call's Bases| id4(Identy or <br/> Deduce Mutation)
id4==>id5(Generating <br/> Origin of the Mutation)
id5==>id6(Generating <br/> Type of Substitution)
id6==>id7(Loading Database)
id7==>id8(Ploting)
id7==>id9(Statistic Testing)
id7==>id10(Clustering)
id7==>id11[PCA]
")
citation("cohen")
citation("cohen.d")
library(effsize)
citation("cohen.d")
mermaid("
graph TB
id1(SIPO)==>id2[File Handling]
id2==>id3(Mapping Variables)
id3==>|Base Calling| id4(Identifying or <br/> Deducing Mutation)
id4==>id5(Generating <br/> Origin of the Mutation)
id5==>id6(Generating <br/> Type of Substitution)
id6==>id7(Loading Database)
id7==>id8(Ploting)
id7==>id9(Statistic Testing)
id7==>id10(Clustering)
id7==>id11[PCA]
")
?TukeyHSD
citation("TukeyHSD")
library(TukeyHSD)
library(multicomp)
library(multcomp)
citation("TukeyHSD")
citation("Cohen-d")
?cohen.d
?citation
q()
citation("test.t")
q()
library(DiagrammeR)
mermaid("
graph TB
id1(SIPO)==>id2[DATA <br/> MINING]
id2==>id3(CALL RATE > 0.05)
id3==>id4(AUTHENTICATE <br/> LAYOUT);
id4==>id5(ASSAY VARIABLES)
id1==>id6[CALL GENOTYPES]
id6==>id7(MOTHER'S CALL BASE)
id7==>id8(FATHER'S CALL BASE)
id8==>id9(OFFSPRING'S CALL BASE)
id1==>id10[MENDELIAN DEVIATION]
id10==>id11(WITHOUT <br/>INFERENCE)
id10==>id12(WITH <br/>INFERENCE)
id12==>id13(LOWEST CONFIDENCE CALL)
id13==>id14(NEAREST MUTATION); id14==>id15
id11==>id15>OUTPUT: ORIGIN OF THE MUTATION <br/>AND TYPE OF SUBSTITUTION]
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
id1(SIPO); B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
id1->1 B->2 B->3 B->4 C->id1
1->D E->id1 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
SIPO; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
SIPO->1 B->2 B->3 B->4 C->SIPO
1->D E->SIPO 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B--C((Filters))
C--D((ASSAY VARIAB))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
J-->M>Output: SNPs with MD; Parental Origin; Type of Substitution]
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B--C(Filters)
C--D(Assay Variables)
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
J-->M>Output: SNPs with MD; Parental Origin; Type of Substitution]
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
J-->M>Output: SNPs with MD; Parental Origin; Type of Substitution]
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
J-->M>Output: SNPs with MD-Parental Origin-Type of Substitution]
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: a)SNPs with MD b)Parental Origin c)Type of Substitution]
I-->M
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
I-->M
")
mermaid("
graph TD
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
L-->M
")
mermaid("
graph LR
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
L-->M
")
mermaid("
graph TB
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
L-->M
")
mermaid("
graph RL
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
L-->M
")
mermaid("
graph BT
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
L-->M
")
mermaid("
graph TB
A(SIPO)-->B>Genotyping Data Files - ChAS]
B---C((Filters))
C---D((Assay Variables))
D-->E[Mother's Calling Base']
E-->F[Father's Calling Base']
F-->G[Offspring's Calling Base']
G-->H(Mendelian deviationsian)
H-->I{Parental Origin}
I-->J(With Inference)
I-->L(Without Inference)
J-->K(Lowest Confidence)
K-->M>Output: -SNPs with MD -Parental Origin -Type of Substitution]
L-->M
")
q()
library("plotly")
library(magrittr)
y <- c('Inference','No Inference')
A <- c(9120, 9157)
B <- c(5002, 13427)
data <- data.frame(y, A, B)
p.bar <- plot_ly(data, x = ~A, y = ~y, type = 'bar', orientation = 'h', name = 'A',
marker = list(color = 'rgba(246, 78, 139, 0.6)',
line = list(color = 'rgba(246, 78, 139, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~B, name = 'B',
marker = list(color = 'rgba(58, 71, 80, 0.6)',
line = list(color = 'rgba(58, 71, 80, 1.0)',
width = 3)))
p.bar <- p.bar %>% layout(barmode = 'stack',
xaxis = list(title = "Number of Mendelian Deviation"),
yaxis = list(title =""))
p.bar
y <- c('Inference','No Inference')
A <- c(5002, 13427)
B <- c(9120, 9157)
data <- data.frame(y, A, B)
p.bar
p.bar <- plot_ly(data, x = ~A, y = ~y, type = 'bar', orientation = 'h', name = 'A',
marker = list(color = 'rgba(246, 78, 139, 0.6)',
line = list(color = 'rgba(246, 78, 139, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~B, name = 'B',
marker = list(color = 'rgba(58, 71, 80, 0.6)',
line = list(color = 'rgba(58, 71, 80, 1.0)',
width = 3)))
p.bar <- p.bar %>% layout(barmode = 'stack',
xaxis = list(title = "Number of Mendelian Deviation"),
yaxis = list(title =""))
p.bar
q()
library("plotly")
library(magrittr)
y <- c('Inference','No Inference')
A <- c(5002, 13427)
B <- c(9120, 9157)
data <- data.frame(y, A, B)
p.bar <- plot_ly(data, x = ~A, y = ~y, type = 'bar', orientation = 'h', name = 'Group A',
marker = list(color = 'rgba(246, 78, 139, 0.6)',
line = list(color = 'rgba(246, 78, 139, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~B, name = 'Group B',
marker = list(color = 'rgba(58, 71, 80, 0.6)',
line = list(color = 'rgba(58, 71, 80, 1.0)',
width = 3)))
p.bar <- p.bar %>% layout(barmode = 'stack',
xaxis = list(title = "Number of Mendelian Deviation"),
yaxis = list(title =""))
p.bar
y <- c('Inference','No Inference')
A <- c(5002, 13427)
B <- c(9120, 9157)
C <- c(8872, 15827)
data <- data.frame(y, A, B, C)
p.bar <- plot_ly(data, x = ~A, y = ~y, type = 'bar', orientation = 'h', name = 'Group A',
marker = list(color = 'rgba(246, 78, 139, 0.6)',
line = list(color = 'rgba(246, 78, 139, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~B, name = 'Group B',
marker = list(color = 'rgba(58, 71, 80, 0.6)',
line = list(color = 'rgba(58, 71, 80, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~C, name = 'Group C',
marker = list(color = 'rgba(0,0,255,0.3)',
line = list(color = 'rgba(0,0,255,0.3)',
width = 3)))
p.bar <- p.bar %>% layout(barmode = 'stack',
xaxis = list(title = "Number of Mendelian Deviation"),
yaxis = list(title =""))
p.bar
setwd('F:/doutorado/tese/artigo_grm/dados/Statistics A and B')
dfAge<-read.csv("dataset_sipo_dm_age_group.csv",header = TRUE,sep = ";",dec = ".")
dfAge
library(plotly)
fig <- df %>%
plot_ly(
x = ~group,
y = ~dm.total,
split = ~group,
type = 'violin',
box = list(
visible = T
),
meanline = list(
visible = T
)
)
fig <- fig %>%
layout(
xaxis = list(
title = "Group"
),
yaxis = list(
title = "Total Mendelian Deviation ",
zeroline = F
)
)
fig
fig <- dfAge %>%
plot_ly(
x = ~group,
y = ~dm.total,
split = ~group,
type = 'violin',
box = list(
visible = T
),
meanline = list(
visible = T
)
)
fig <- fig %>%
layout(
xaxis = list(
title = "Group"
),
yaxis = list(
title = "Total Mendelian Deviation ",
zeroline = F
)
)
fig
figFatherAge <- dfAge %>%
plot_ly(
x = ~group,
y = ~idade.pai,
split = ~group,
type = 'violin',
box = list(
visible = T
),
meanline = list(
visible = T
)
)
figFatherAge <- figFatherAge %>%
layout(
xaxis = list(
title = "Group"
),
yaxis = list(
title = "Total Mendelian Deviation ",
zeroline = F
)
)
figFatherAge
dfTest<-read.csv("dataset_sipo_dm_age_group.csv",header = TRUE,sep = ";",dec = ".")
dfTestt <- dfTest[c(5, 6, 9)]
dfTestt
dfTestt <- dfTest[c(4, 5, 9)]
dfTestt
dfTestt.long <- dfTestt %>%
pivot_longer(-group, names_to = "variables", values_to = "value")
dfTestt.long %>% sample_n(5)
install.packages("rstatix")
library(tidyverse)
library(rstatix)
library(ggpubr)
dfTestt.long <- dfTestt %>%
pivot_longer(-group, names_to = "variables", values_to = "value")
dfTestt.long
stat.test <- dfTestt.long %>%
group_by(variables) %>%
t_test(value ~ group) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
stat.test
pTestTAge <- ggboxplot(
dfTestt.long, x = "group", y = "value",
fill = "group", palette = "npg", legend = "none",
ggtheme = theme_pubr(border = TRUE)
) +
facet_wrap(~variables)
stat.test <- stat.test %>% add_xy_position(x = "Group")
pTestTAge + stat_pvalue_manual(stat.test, label = "p.adj.signif")
stat.test <- stat.test %>% add_xy_position(x = "group")
pTestTAge + stat_pvalue_manual(stat.test, label = "p.adj.signif")
,dfTestDMt <- dfTest[c(8, 9)]
dfTestDMt <- dfTest[c(8, 9)]
dfTestDMt.long <- dfTestDMt %>%
pivot_longer(-group, names_to = "variables", values_to = "value")
dfTestDMt.long
stat.test.dm <- dfTestDMt.long %>%
group_by(variables) %>%
t_test(value ~ group) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
stat.test.dm
summary(stat.test.dm)
?t.test
?t_test
pTestDMT <- ggboxplot(
dfTestDMt.long, x = "group", y = "value",
fill = "group", palette = "npg", legend = "none",
ggtheme = theme_pubr(border = TRUE)
) +
facet_wrap(~variables)
stat.test.dm <- stat.test.dm %>% add_xy_position(x = "group")
pTestDMT + stat_pvalue_manual(stat.test.dm, label = "p")
y <- c('Inference','No Inference')
A <- c(5906, 6138)
B <- c(781, 3896)
C <- c(9902, 7884)
data <- data.frame(y, A, B, C)
p.bar <- plot_ly(data, x = ~A, y = ~y, type = 'bar', orientation = 'h', name = 'Group A',
marker = list(color = 'rgba(246, 78, 139, 0.6)',
line = list(color = 'rgba(246, 78, 139, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~B, name = 'Group B',
marker = list(color = 'rgba(58, 71, 80, 0.6)',
line = list(color = 'rgba(58, 71, 80, 1.0)',
width = 3)))
p.bar <- p.bar %>% add_trace(x = ~C, name = 'Group C',
marker = list(color = 'rgba(0,0,255,0.3)',
line = list(color = 'rgba(0,0,255,0.3)',
width = 3)))
p.bar <- p.bar %>% layout(barmode = 'stack',
xaxis = list(title = "Number of Mendelian Deviation"),
yaxis = list(title =""))
p.bar
q()
